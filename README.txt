/************************************************************* 
- C程序设计谭浩强版学习日志
- 作者：谢荣桢
- 版本：V1.0
*************************************************************/
------------------------------------------------------------- 
2018/8/31（22:01）： 
	第二章 算法--程序的灵魂
	2.2 算法举例实现  
	问题：例2.4对分数多项式的求解中应使用float类型，包括函数返回值定义，
		同时运算中的常量必须是浮点数，否则会强制转换成整型，导致小数部
		分被抹去。 
------------------------------------------------------------- 
2018/9/1（7:49）： 
	第二章 算法--程序的灵魂
	2.3 算法的特性
		有穷性
		确定性
		有零个或多个输入
		有一个或多个输出
		有效性
		
	2.4 怎样表示一个算法 
		流程图（由菱形框和连接点组成） 
	 	N-S流程图
		伪代码
		计算机语言
		
	2.5 结构化程序设计方法
		自顶向下
		逐步细化
		模块化设计
		结构化编程
	
	第三章 最简单的C程序设计――顺序程序设计
	3.1 顺序程序设计举例
	3.2 数据的表现形式及其运算
		常量：整型常量、实型常量、字符常量（普通字符，转义字符）、字符串常量、符号常量（#define，预编译后被置换，不分配存储单元）
		变量：先定义，后使用
		常变量（C99以后）：const前缀，有类型，占存储单元，但不允许改变其值。
		标识符：
		
		数据类型： 
			整型
			浮点型
			枚举
			空类型（void）
			派生类型： 
				指针
				数组
				结构体（struct）
				共用体（union）
				函数类型 
		
		运算符和表达式
		注：(1)两个实数相除的结果是双精度实数，两个整数相除的结果为整数（舍去小数部分）
			若除数或被除数中有一个为负值，整数相除的舍入方向是不固定的。		
			(2)i+++j 相当于 (i++)+j
			   i---j 相当于 (i--)-j
			(3)四则运算中有一个数为float或double,结果为double.
			   int和float运算，把两者转换为double,结果为double
			   char和int运算，如12+'A',等于12+65=77
			   char和实型数据运算，将ASCII代码转为double再运算。
----------------------------------------------------------------------			   
2018/9/1（17:49）：			   
	3.3 C语句
		控制语句
			if()...else...
			for()...
			while()...
			do...while()
			continue  --结束本次循环语句
			break     --中止执行switch或循环语句
			switch    --多分支选择语句
			return    
			goto      --转向语句，在结构化程序中基本不用goto语句
		
		函数调用语句
		表达式语句
		空语句
		复合语句（{}内的语句和声明，又称语句块） 
		
		注：当double数值赋给float变量时不能超出float变量的数值范围，否则会出错。
			占字节多的整型数据向占字节少的整型数据变量赋值，数组可能失真。
			只有静态存储变量和外部变量的初始化在编译阶段完成。 
			
	3.4 数据的输入输出
		输入输出是以计算机主机为主题而言的。
		C语言本身不提供输入输出语句。
		float型数据只能保证6位有效数字。double型数据能保证15位有效数字。
		 
		printf函数
		注：格式声明由 % 和 格式符 组成。将输出的数据转换为指定的格式然后输出。 
			
		f格式符输出的数据向左对齐，用%-m.nf。
		e格式符以指数形式输出实数。
		o格式符以八进制整数形式输出。x格式符以十六进制数形式输出整数。
		u格式符输出无符号十进制整数。g格式符输出浮点数，不输出无意义的0。 
		
		scanf函数（scanf(格式控制，地址表列)） 
		scanf函数的地址表列是变量地址。 
		
		注：执行getchar函数可以获得在屏幕上无法显示的字符，如控制字符。
-------------------------------------------------------------------------
2018/9/2（8:42）：
	第四章 选择结构程序设计
	4.1 选择结构和条件判断
		if语句：双分支选择
		switch语句：多分支选择
	
	4.2 用if语句实现选择结构
	4.3 关系运算符和关系表达式
		关系运算符优先次序
			(1)(<,<=,>,>=)优先级别相同，(==,!=)优先级别相同。前4种高于后2种。
			(2)关系运算符优先级低于算术运算符。
			(3)关系运算符优先级高于赋值运算符
	
	4.4 逻辑运算符和逻辑表达式
		逻辑运算符优先次序
			(1)!(非) > 算术运算符 > 关系运算符 > &&(与) > ||(或)。
	
		逻辑型变量（C99后新增)
			定义逻辑型变量用类型符_Bool
			包含头文件stdbool.h，可用bool代替_Bool
			注：逻辑型变量bool,true,false是C新标准，以增加程序可读性，有些老的C编译系统
				并未实现此功能，要注意。 
	
	4.5 条件运算符和条件表达式
		条件表达式的一般形式：
			表达式1 ？ 表达式2 ：表达式3
		执行顺序：
			先求解表达式1，若真则求解表达式2，否则求解表达式3。 
		
	4.6 选择结构的嵌套
	
	4.7 用switch语句实现多分支选择结构
		注意：switch后面的括号内的表达式值的类型应为整数类型。
		 
	4.8 选择结构程序综合举例
		思考：例4.9程序是否可以简化，降低耦合，分解出一个或多个函数处理计算部分，剔除printf函数。
		  	  例4.10程序是否可以分解出单独的运费计算函数。	 
----------------------------------------------------------------------
2018/9/2（13:44）：
	完成第四章习题。 
	习题11：a[i]>a[j] ? t=a[i],a[i]=a[j],a[j]=t : a[i]==a[i],a[j]==a[j];//第二个表达式不知为何不可赋值。
---------------------------------------------------------------------- 
2018/9/2（18:18）：
	第五章 循环结构程序设计
	5.1 为什么需要循环控制
	5.2 用while语句实现循环
		while语句：先判断条件表达式，为真，则执行循环体语句。
	
	5.3 用do……while语句实现循环
		do...while语句：先无条件地执行循环体，然后判断循环条件是否成立。
						do...while语句不管循环条件是否成立都至少执行一次循环体。
					
	5.4 用for语句实现循环
		for语句执行过程：(1)先求解表达式1.
						 (2)求解表达式2，若为真，则执行循环体语句，然后执行第(3)步。否则循环结束。
						 (3)求解表达式3。
						 (4)转回步骤(2).
		注：C99允许在for语句的表达式1中定义变量并赋初值。
		
	5.5 循环的嵌套
		3种循环可以互相嵌套。
	
	5.6 几种循环的比较
		3种循环都可用break语句跳出循环，用continue语句结束本次循环。
		
	5.7 改变循环执行的状态
		用break语句提前终止循环 
		用continue语句提前结束本次循环
		由例5.5可知，continue语句只是结束本次循环，即本次不再执行循环体后续语句，然后开始新一轮的循环。
		注：continue语句只结束本次循环，而不是终止整个循环的执行。而break语句则是解释整个循环过程。 
	
	5.8 循环程序举例
	
	完成到第五章习题8。
-------------------------------------------------------- 
2018/9/3（14:48）：
	完成第五章习题。
	注：习题9能否减少循环次数。
		习题12中的两种方法是等价的，但那种更合适
			(1)peachs = (peachs += 1)*2;	
			(2)peachs += peachs;
			   peachs = peachs*2; 
		习题13的关键while(fabs(x2-x1) >= 1e-5);
		习题14：牛顿迭代法不熟，对于函数间的数据传递掌握不足。
		习题15：我的算法似乎只考虑到区间内只有一个根的结果
		习题16：是否还有更简洁的方法？
		习题17：在最后一个if语句中加上可以显著减少多余的无谓的循环。但是否可以拆分如此之多的嵌套循环以减少语句运行。
		
		做题时的几个疑惑：
		1.如何在函数中返回多个值而不造成全局或整个当前文件的影响，函数内的变量的作用域只在函数内与调用函数内，
		  即返回的值只可被调用它的函数所使用而不能被其他函数通过赋值或指针的方式改变，也不会改变其他函数中的
		  同名变量或同名指针。同时函数如要调用其中的值无需用循环语句多次取单个值，而能用一条语句取出全部返回值。 
-------------------------------------------------------- 
2018/9/4（18:37）：
	第六章 利用数组处理批量数据
	6.1 怎样定义和引用一堆数组	
		1.定义一维数组的一般形式为：
			类型符 数组名[常量表达式];
		说明：
			(1)数组名的命名规则遵循标识符命名规则。
			(2)定义数组时，需要指定数组中元素的个数。
			(3)常量表达式中可以包括常量和符号常量。
		注：如果在被调用的函数(不包括主函数)中定义数组，其长度可以是变量或非常量表达式。
			如：
				void fnc(int n)
				{
					int a[2*n];
					...
				}
		
		2.引用一维数组元素
			数组名[下标] 
		
		3.一维数组的初始化
			(1)在定义数组时对全部数组元素赋予初值。
			(2)可以只给数组中的一部分元素赋值
			(3)如果想使数组中全部元素为0，可写成：int a[10] = {0};
			(4)在对全部数组元素赋初值时，可以不指定数组长度：int a[] = {1,2,3}
			注：如果在定义数值型数组时，未指定初始化的元素，系统会自动把其初始化为0(字符型数组则初始化为'\0'，指针型数组初始化为NULL，即空指针。)
			
		4.一维数组程序举例 
			例6.3 起泡法排序的基本思路：
				每次将相邻两个数比较，将小的调到前头。
				然后对余下的数按上面方法进行新一轮比较，直到没有未被排序的数。
				注：例6.3中的输入能否输入到第十个数就自动停止。
	
	6.2 怎样定义和引用二维数组
		1.二维数组定义的一般形式为：
			类型名 数组名[常量表达式][常量表达式]
			
			注：二维数组中元素排列的顺序是按行存放的，即对于a[2][3],先存放a[0][0]~a[0][2]再存放a[1][0]~a[1][2];
				在内存中，各元素是连续存放的，不是二维的，是线性的。
				
		2.引用二维数组的元素 
			数组名[下标][下标]
			
			注：在引用数组元素时，下标值应在已定义的数组大小的范围内。
			
		3.二维数组的初始化
			(1)分行给二维数组赋初值。如：
				int a[2][4] = {{1,2,3},{4,5,6}};
			(2)将所有数据写在一个花括号内。
				int a[2][4] = {1,2,3,4,5,6};
			(3)可以对部分元素赋初值。
			
		4.二维数组程序举例
			例6.4 将语句 b[j][i] = a[i][j];放进循环表达式中是否更好。
				  例：for(j=0; j<=2; b[j][i] = a[i][j],printf("%5d",a[i][j++]))；
				  
			例6.5 打擂台算法：
				先找一个人站在台上，第二个人上去与之比武，获胜者留在擂台上。
				再上去第三个人，与台上的人（即刚才的得胜者）比武，胜者留在台
				上，败者下台，直到所有的人都比试过后，最后留在擂台上的即是冠军。
				
				应用：求一组数据中的最大值或者最小值
				
	6.3 字符数组
		1.定义字符数组
			与定义数值型数组的方法类似。
			
		2.字符数组的初始化
		3.引用字符数组中的元素
		4.字符串和字符串结束标志
			C语言在输出字符数组中的字符串时，遇'\0'就停止输出；
			同时，在计算字符串的长度时要加上最后的结束标志'\0'.
			
		5.字符数组的输入输出
			(1)输出的字符不包括结束符'\0'。
			(2)用%s格式输出字符串时，printf函数中的输出项是字符数组名。
			(3)数组长度大于字符串的实际长度时，也只输出到遇'\0'结束。
			(4)一个字符数组包含一个以上'\0'，遇第一个'\0'时输出就结束。
			(5)可以用scanf函数输入一个字符串。
				注：scanf函数中的输入项不需再加&。
		
		6.使用字符串处理函数(包含头文件string.h) 
			(1)puts函数--输出字符串的函数
				一般形式为：puts(字符数组)	
				
			(2)gets函数--输入字符串的函数
				一般形式为：gets(字符数组)
				
			注：puts和gets函数只能输出或输入一个字符串。
			
			(3)strcat函数-- 字符串连接函数(strcat 是 string catenate（字符串连接）的缩写) 
				一般形式为：strcat(字符数组1,字符数组2) 
				说明：字符数组1必须足够容纳连接后的新字符串 
					  连接后只在新串最后保留'\0'
			
			(4)strcpy和strncpy函数--字符串复制函数(strcpy 是 string copy的简写) 
				一般形式为：strcpy(字符数组1,字符数组2)
							strncpy(字符数组1, 字符数组2,n) //n 为字符串2的前n个字符。 
				说明：字符数组1的长度不小于字符串2
					  字符数组1必须写成数组名形式，字符数组2既可以是数组名也可是字符串常量
					  复制前字符数组1未初始化或赋值(其中的内容无法预知)，复制时将字符数组2中的字符串和'\0'复制到字符数组1，而数组1多余的字节的内容仍为其原有的数据(无法预知) 
		 			  不能用赋值语句将一个字符串常量或字符数组直接给一个字符数组(赋值语句只能赋给一个字符变量或字符数组元素)。只能用strcpy函数。
					  可以用strncpy函数将字符数组2中的前n个字符复制到字符数组1以取代其原有的前n个字符。
					  
			(5)strcmp函数--字符串比较函数(strcmp: string compare)
				一般形式为：strcmp(字符串1,字符串2)
				说明：字符串比较只能使用strcmp函数
					  比较自左至右比较ASCII码值，直到出现不同的字符或遇到'\0'。
					  相等时函数值为0；字符串1>字符串2，值为正整数；否则为负整数。
					  
			(6)strlen函数--测字符串长度的函数(strlen: string length)
				一般形式为：strlen(字符数组)
				说明：函数的值为字符串的实际长度(不包括'\0')
					   
			(7)strlwr函数--转换为小写的函数(strlwr: string lowercase(字符串小写))
				一般形式为：strlwr(字符串)
				说明：将字符串中的大写字母换成小写字母
				
			(8)strupr函数--转换为大写的函数(strupr: string uppercase(字符串大写)) 
				一般形式为：strupr(字符串) 
				说明：将字符串中的小写字母换成大写字母
				
		7.字符数组应用举例
			例6.8 没有办法阻止误输入以及不合规格的输入只要有字母仍然会被当做字母进行计算。 
			
	完成第六章习题
		注：例1：筛选法的步骤： 
			<1> 先将1挖掉(因为1不是素数)。
			<2> 用2去除它后面的各个数，把能被2整除的数挖掉，即把2的倍数挖掉。
			<3> 用3去除它后面的各数，把3的倍数挖掉。
			<4> 分别用4,5…各数作为除数去除这些数以后的各数。 
